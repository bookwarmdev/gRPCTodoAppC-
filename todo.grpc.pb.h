// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: todo.proto
#ifndef GRPC_todo_2eproto__INCLUDED
#define GRPC_todo_2eproto__INCLUDED

#include "todo.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class Todo final {
 public:
  static constexpr char const* service_full_name() {
    return "Todo";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status createTodo(::grpc::ClientContext* context, const ::TodoItem& request, ::TodoItem* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TodoItem>> AsynccreateTodo(::grpc::ClientContext* context, const ::TodoItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TodoItem>>(AsynccreateTodoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TodoItem>> PrepareAsynccreateTodo(::grpc::ClientContext* context, const ::TodoItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TodoItem>>(PrepareAsynccreateTodoRaw(context, request, cq));
    }
    virtual ::grpc::Status readTodos(::grpc::ClientContext* context, const ::NoParams& request, ::TodoItems* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TodoItems>> AsyncreadTodos(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TodoItems>>(AsyncreadTodosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TodoItems>> PrepareAsyncreadTodos(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TodoItems>>(PrepareAsyncreadTodosRaw(context, request, cq));
    }
    virtual ::grpc::Status readTodoStream(::grpc::ClientContext* context, const ::NoParams& request, ::TodoItems* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TodoItems>> AsyncreadTodoStream(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TodoItems>>(AsyncreadTodoStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TodoItems>> PrepareAsyncreadTodoStream(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TodoItems>>(PrepareAsyncreadTodoStreamRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void createTodo(::grpc::ClientContext* context, const ::TodoItem* request, ::TodoItem* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createTodo(::grpc::ClientContext* context, const ::TodoItem* request, ::TodoItem* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void readTodos(::grpc::ClientContext* context, const ::NoParams* request, ::TodoItems* response, std::function<void(::grpc::Status)>) = 0;
      virtual void readTodos(::grpc::ClientContext* context, const ::NoParams* request, ::TodoItems* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void readTodoStream(::grpc::ClientContext* context, const ::NoParams* request, ::TodoItems* response, std::function<void(::grpc::Status)>) = 0;
      virtual void readTodoStream(::grpc::ClientContext* context, const ::NoParams* request, ::TodoItems* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TodoItem>* AsynccreateTodoRaw(::grpc::ClientContext* context, const ::TodoItem& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TodoItem>* PrepareAsynccreateTodoRaw(::grpc::ClientContext* context, const ::TodoItem& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TodoItems>* AsyncreadTodosRaw(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TodoItems>* PrepareAsyncreadTodosRaw(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TodoItems>* AsyncreadTodoStreamRaw(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TodoItems>* PrepareAsyncreadTodoStreamRaw(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status createTodo(::grpc::ClientContext* context, const ::TodoItem& request, ::TodoItem* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TodoItem>> AsynccreateTodo(::grpc::ClientContext* context, const ::TodoItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TodoItem>>(AsynccreateTodoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TodoItem>> PrepareAsynccreateTodo(::grpc::ClientContext* context, const ::TodoItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TodoItem>>(PrepareAsynccreateTodoRaw(context, request, cq));
    }
    ::grpc::Status readTodos(::grpc::ClientContext* context, const ::NoParams& request, ::TodoItems* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TodoItems>> AsyncreadTodos(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TodoItems>>(AsyncreadTodosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TodoItems>> PrepareAsyncreadTodos(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TodoItems>>(PrepareAsyncreadTodosRaw(context, request, cq));
    }
    ::grpc::Status readTodoStream(::grpc::ClientContext* context, const ::NoParams& request, ::TodoItems* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TodoItems>> AsyncreadTodoStream(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TodoItems>>(AsyncreadTodoStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TodoItems>> PrepareAsyncreadTodoStream(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TodoItems>>(PrepareAsyncreadTodoStreamRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void createTodo(::grpc::ClientContext* context, const ::TodoItem* request, ::TodoItem* response, std::function<void(::grpc::Status)>) override;
      void createTodo(::grpc::ClientContext* context, const ::TodoItem* request, ::TodoItem* response, ::grpc::ClientUnaryReactor* reactor) override;
      void readTodos(::grpc::ClientContext* context, const ::NoParams* request, ::TodoItems* response, std::function<void(::grpc::Status)>) override;
      void readTodos(::grpc::ClientContext* context, const ::NoParams* request, ::TodoItems* response, ::grpc::ClientUnaryReactor* reactor) override;
      void readTodoStream(::grpc::ClientContext* context, const ::NoParams* request, ::TodoItems* response, std::function<void(::grpc::Status)>) override;
      void readTodoStream(::grpc::ClientContext* context, const ::NoParams* request, ::TodoItems* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::TodoItem>* AsynccreateTodoRaw(::grpc::ClientContext* context, const ::TodoItem& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TodoItem>* PrepareAsynccreateTodoRaw(::grpc::ClientContext* context, const ::TodoItem& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TodoItems>* AsyncreadTodosRaw(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TodoItems>* PrepareAsyncreadTodosRaw(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TodoItems>* AsyncreadTodoStreamRaw(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TodoItems>* PrepareAsyncreadTodoStreamRaw(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_createTodo_;
    const ::grpc::internal::RpcMethod rpcmethod_readTodos_;
    const ::grpc::internal::RpcMethod rpcmethod_readTodoStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status createTodo(::grpc::ServerContext* context, const ::TodoItem* request, ::TodoItem* response);
    virtual ::grpc::Status readTodos(::grpc::ServerContext* context, const ::NoParams* request, ::TodoItems* response);
    virtual ::grpc::Status readTodoStream(::grpc::ServerContext* context, const ::NoParams* request, ::TodoItems* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_createTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createTodo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_createTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createTodo(::grpc::ServerContext* /*context*/, const ::TodoItem* /*request*/, ::TodoItem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateTodo(::grpc::ServerContext* context, ::TodoItem* request, ::grpc::ServerAsyncResponseWriter< ::TodoItem>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_readTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_readTodos() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_readTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readTodos(::grpc::ServerContext* /*context*/, const ::NoParams* /*request*/, ::TodoItems* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadTodos(::grpc::ServerContext* context, ::NoParams* request, ::grpc::ServerAsyncResponseWriter< ::TodoItems>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_readTodoStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_readTodoStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_readTodoStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readTodoStream(::grpc::ServerContext* /*context*/, const ::NoParams* /*request*/, ::TodoItems* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadTodoStream(::grpc::ServerContext* context, ::NoParams* request, ::grpc::ServerAsyncResponseWriter< ::TodoItems>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_createTodo<WithAsyncMethod_readTodos<WithAsyncMethod_readTodoStream<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_createTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createTodo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::TodoItem, ::TodoItem>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::TodoItem* request, ::TodoItem* response) { return this->createTodo(context, request, response); }));}
    void SetMessageAllocatorFor_createTodo(
        ::grpc::MessageAllocator< ::TodoItem, ::TodoItem>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::TodoItem, ::TodoItem>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createTodo(::grpc::ServerContext* /*context*/, const ::TodoItem* /*request*/, ::TodoItem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createTodo(
      ::grpc::CallbackServerContext* /*context*/, const ::TodoItem* /*request*/, ::TodoItem* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_readTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_readTodos() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::NoParams, ::TodoItems>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::NoParams* request, ::TodoItems* response) { return this->readTodos(context, request, response); }));}
    void SetMessageAllocatorFor_readTodos(
        ::grpc::MessageAllocator< ::NoParams, ::TodoItems>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NoParams, ::TodoItems>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_readTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readTodos(::grpc::ServerContext* /*context*/, const ::NoParams* /*request*/, ::TodoItems* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* readTodos(
      ::grpc::CallbackServerContext* /*context*/, const ::NoParams* /*request*/, ::TodoItems* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_readTodoStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_readTodoStream() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::NoParams, ::TodoItems>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::NoParams* request, ::TodoItems* response) { return this->readTodoStream(context, request, response); }));}
    void SetMessageAllocatorFor_readTodoStream(
        ::grpc::MessageAllocator< ::NoParams, ::TodoItems>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::NoParams, ::TodoItems>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_readTodoStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readTodoStream(::grpc::ServerContext* /*context*/, const ::NoParams* /*request*/, ::TodoItems* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* readTodoStream(
      ::grpc::CallbackServerContext* /*context*/, const ::NoParams* /*request*/, ::TodoItems* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_createTodo<WithCallbackMethod_readTodos<WithCallbackMethod_readTodoStream<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_createTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createTodo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_createTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createTodo(::grpc::ServerContext* /*context*/, const ::TodoItem* /*request*/, ::TodoItem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_readTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_readTodos() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_readTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readTodos(::grpc::ServerContext* /*context*/, const ::NoParams* /*request*/, ::TodoItems* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_readTodoStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_readTodoStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_readTodoStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readTodoStream(::grpc::ServerContext* /*context*/, const ::NoParams* /*request*/, ::TodoItems* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_createTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createTodo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_createTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createTodo(::grpc::ServerContext* /*context*/, const ::TodoItem* /*request*/, ::TodoItem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateTodo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_readTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_readTodos() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_readTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readTodos(::grpc::ServerContext* /*context*/, const ::NoParams* /*request*/, ::TodoItems* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadTodos(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_readTodoStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_readTodoStream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_readTodoStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readTodoStream(::grpc::ServerContext* /*context*/, const ::NoParams* /*request*/, ::TodoItems* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestreadTodoStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createTodo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createTodo(context, request, response); }));
    }
    ~WithRawCallbackMethod_createTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createTodo(::grpc::ServerContext* /*context*/, const ::TodoItem* /*request*/, ::TodoItem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createTodo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_readTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_readTodos() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->readTodos(context, request, response); }));
    }
    ~WithRawCallbackMethod_readTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readTodos(::grpc::ServerContext* /*context*/, const ::NoParams* /*request*/, ::TodoItems* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* readTodos(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_readTodoStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_readTodoStream() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->readTodoStream(context, request, response); }));
    }
    ~WithRawCallbackMethod_readTodoStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readTodoStream(::grpc::ServerContext* /*context*/, const ::NoParams* /*request*/, ::TodoItems* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* readTodoStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createTodo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createTodo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::TodoItem, ::TodoItem>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::TodoItem, ::TodoItem>* streamer) {
                       return this->StreamedcreateTodo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createTodo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createTodo(::grpc::ServerContext* /*context*/, const ::TodoItem* /*request*/, ::TodoItem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateTodo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TodoItem,::TodoItem>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_readTodos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_readTodos() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NoParams, ::TodoItems>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NoParams, ::TodoItems>* streamer) {
                       return this->StreamedreadTodos(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_readTodos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status readTodos(::grpc::ServerContext* /*context*/, const ::NoParams* /*request*/, ::TodoItems* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedreadTodos(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NoParams,::TodoItems>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_readTodoStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_readTodoStream() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::NoParams, ::TodoItems>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::NoParams, ::TodoItems>* streamer) {
                       return this->StreamedreadTodoStream(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_readTodoStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status readTodoStream(::grpc::ServerContext* /*context*/, const ::NoParams* /*request*/, ::TodoItems* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedreadTodoStream(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::NoParams,::TodoItems>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_createTodo<WithStreamedUnaryMethod_readTodos<WithStreamedUnaryMethod_readTodoStream<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_createTodo<WithStreamedUnaryMethod_readTodos<WithStreamedUnaryMethod_readTodoStream<Service > > > StreamedService;
};


#endif  // GRPC_todo_2eproto__INCLUDED
