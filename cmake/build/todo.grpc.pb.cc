// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: todo.proto

#include "todo.pb.h"
#include "todo.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* Todo_method_names[] = {
  "/Todo/createTodo",
  "/Todo/readTodos",
  "/Todo/readTodoStream",
};

std::unique_ptr< Todo::Stub> Todo::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Todo::Stub> stub(new Todo::Stub(channel, options));
  return stub;
}

Todo::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_createTodo_(Todo_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_readTodos_(Todo_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_readTodoStream_(Todo_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Todo::Stub::createTodo(::grpc::ClientContext* context, const ::TodoItem& request, ::TodoItem* response) {
  return ::grpc::internal::BlockingUnaryCall< ::TodoItem, ::TodoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_createTodo_, context, request, response);
}

void Todo::Stub::async::createTodo(::grpc::ClientContext* context, const ::TodoItem* request, ::TodoItem* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::TodoItem, ::TodoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createTodo_, context, request, response, std::move(f));
}

void Todo::Stub::async::createTodo(::grpc::ClientContext* context, const ::TodoItem* request, ::TodoItem* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_createTodo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TodoItem>* Todo::Stub::PrepareAsynccreateTodoRaw(::grpc::ClientContext* context, const ::TodoItem& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TodoItem, ::TodoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_createTodo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TodoItem>* Todo::Stub::AsynccreateTodoRaw(::grpc::ClientContext* context, const ::TodoItem& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccreateTodoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Todo::Stub::readTodos(::grpc::ClientContext* context, const ::NoParams& request, ::TodoItems* response) {
  return ::grpc::internal::BlockingUnaryCall< ::NoParams, ::TodoItems, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_readTodos_, context, request, response);
}

void Todo::Stub::async::readTodos(::grpc::ClientContext* context, const ::NoParams* request, ::TodoItems* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::NoParams, ::TodoItems, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_readTodos_, context, request, response, std::move(f));
}

void Todo::Stub::async::readTodos(::grpc::ClientContext* context, const ::NoParams* request, ::TodoItems* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_readTodos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TodoItems>* Todo::Stub::PrepareAsyncreadTodosRaw(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TodoItems, ::NoParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_readTodos_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TodoItems>* Todo::Stub::AsyncreadTodosRaw(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreadTodosRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Todo::Stub::readTodoStream(::grpc::ClientContext* context, const ::NoParams& request, ::TodoItems* response) {
  return ::grpc::internal::BlockingUnaryCall< ::NoParams, ::TodoItems, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_readTodoStream_, context, request, response);
}

void Todo::Stub::async::readTodoStream(::grpc::ClientContext* context, const ::NoParams* request, ::TodoItems* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::NoParams, ::TodoItems, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_readTodoStream_, context, request, response, std::move(f));
}

void Todo::Stub::async::readTodoStream(::grpc::ClientContext* context, const ::NoParams* request, ::TodoItems* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_readTodoStream_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TodoItems>* Todo::Stub::PrepareAsyncreadTodoStreamRaw(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::TodoItems, ::NoParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_readTodoStream_, context, request);
}

::grpc::ClientAsyncResponseReader< ::TodoItems>* Todo::Stub::AsyncreadTodoStreamRaw(::grpc::ClientContext* context, const ::NoParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreadTodoStreamRaw(context, request, cq);
  result->StartCall();
  return result;
}

Todo::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Todo_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Todo::Service, ::TodoItem, ::TodoItem, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Todo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::TodoItem* req,
             ::TodoItem* resp) {
               return service->createTodo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Todo_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Todo::Service, ::NoParams, ::TodoItems, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Todo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::NoParams* req,
             ::TodoItems* resp) {
               return service->readTodos(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Todo_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Todo::Service, ::NoParams, ::TodoItems, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Todo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::NoParams* req,
             ::TodoItems* resp) {
               return service->readTodoStream(ctx, req, resp);
             }, this)));
}

Todo::Service::~Service() {
}

::grpc::Status Todo::Service::createTodo(::grpc::ServerContext* context, const ::TodoItem* request, ::TodoItem* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Todo::Service::readTodos(::grpc::ServerContext* context, const ::NoParams* request, ::TodoItems* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Todo::Service::readTodoStream(::grpc::ServerContext* context, const ::NoParams* request, ::TodoItems* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


